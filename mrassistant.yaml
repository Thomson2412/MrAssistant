# https://github.com/esphome/home-assistant-voice-pe/blob/8178e25aceb4f08b0f2e932dc902974dc7f1632a/home-assistant-voice.yaml
esphome:
  name: mrassistant
  friendly_name: "Mr Assistant"

esp32:
  board: esp32-s3-devkitc-1
  cpu_frequency: 240MHz
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"

      # Moves instructions and read only data from flash into PSRAM on boot.
      # Both enabled allows instructions to execute while a flash operation is in progress without needing to be placed in IRAM.
      # Considerably speeds up mWW at the cost of using more PSRAM.
      CONFIG_SPIRAM_RODATA: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  level: DEBUG
  logs:
    sensor: WARN  # avoids logging debug sensor updates

# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome
    id: ota_esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Mrassistant Fallback Hotspot"
    password: !secret wifi_ap_password
  fast_connect: true
  power_save_mode: none

captive_portal:

# I2S Audio configuration  
i2s_audio:
  - id: i2s_input
    # data line is GPIO11
    i2s_lrclk_pin:
      number: GPIO09
    i2s_bclk_pin:
      number: GPIO10

  - id: i2s_output
    # i2s_output data pin is GPIO07
    i2s_lrclk_pin:
      number: GPIO5
    i2s_bclk_pin:
      number: GPIO6

# Microphone configuration  
microphone:
  - platform: i2s_audio
    id: i2s_audio_microphone
    i2s_audio_id: i2s_input
    i2s_din_pin: GPIO11
    adc_type: external
    sample_rate: 16000
    bits_per_sample: 32bit
    channel: left

# Speaker configuration
speaker:
  - platform: i2s_audio
    id: i2s_audio_speaker
    i2s_audio_id: i2s_output
    i2s_dout_pin: GPIO07
    bits_per_sample: 32bit
    dac_type: external
    channel: mono
    timeout: never
    sample_rate: 48000
    buffer_duration: 100ms

  # Virtual speakers to combine the announcement and media streams together into one output
  - platform: mixer
    id: mixing_speaker
    output_speaker: i2s_audio_speaker
    num_channels: 2
    source_speakers:
      - id: announcement_mixing_input
        timeout: never
      - id: media_mixing_input
        timeout: never

  # Vritual speakers to resample each pipelines' audio, if necessary, as the mixer speaker requires the same sample rate
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
    bits_per_sample: 16
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000
    bits_per_sample: 16

media_player:
  - platform: speaker
    id: external_media_player
    name: Media Player
    internal: False
    volume_increment: 0.05
    volume_min: 0.4
    volume_max: 0.85
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 1  # Stereo audio is unnecessary for announcements
      sample_rate: 48000
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC     # FLAC is the least processor intensive codec
      num_channels: 2
      sample_rate: 48000
    on_announcement:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
    on_state:
      if:
        condition:
          and:
            - not:
                voice_assistant.is_running:
            - not:
                media_player.is_announcing:
        then:
          - mixer_speaker.apply_ducking:
              id: media_mixing_input
              decibel_reduction: 0
              duration: 1.0s
    files:
      - id: wake_word_triggered_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac

# Wake word detection
micro_wake_word:
  id: mww
  models:
    - model: okay_nabu
    - model: https://github.com/kahrendt/microWakeWord/releases/download/stop/stop.json
      id: stop
      internal: true
  microphone:
    microphone: i2s_audio_microphone
    channels: 0
    gain_factor: 4
  stop_after_detection: false
  vad:
  on_wake_word_detected:
  - if:
      condition:
        voice_assistant.is_running:
      then:
        voice_assistant.stop:
      # Stop any other media player announcement
      else:
        - if:
            condition:
              media_player.is_announcing:
            then:
              - media_player.stop:
                  announcement: true
            # Start the voice assistant and play the wake sound, if enabled
            else:
              - script.execute:
                  id: play_sound
                  priority: true
                  sound_file: !lambda return id(wake_word_triggered_sound);
              - voice_assistant.start:
                  wake_word: !lambda return wake_word;

# Voice assistant configuration
voice_assistant:
  microphone:
    microphone: i2s_audio_microphone
    channels: 0
  media_player: external_media_player
  noise_suppression_level: 0
  auto_gain: 0 dbfs
  volume_multiplier: 1
  micro_wake_word: mww
  use_wake_word: false
  
  on_client_connected:
    - micro_wake_word.start:
        
  on_client_disconnected:
    - voice_assistant.stop:

  on_start:
    - logger.log: "Voice assistant started"
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 20  # Number of dB quieter; higher implies more quiet, 0 implies full volume
        duration: 0.0s         # The duration of the transition (default is no transition)
  
  on_wake_word_detected:
    - logger.log: "Wake word detected by voice assistant"
  
  on_stt_vad_end:
    - logger.log: "Speech ended"
  
  on_tts_start:
    - logger.log: "TTS started"
  
  on_tts_end:
    - logger.log: "TTS ended"
  
  on_end:
    - logger.log: "Voice assistant ended"
    - wait_until:
        not:
          voice_assistant.is_running:
    # Stop ducking audio.
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1.0s
  
  on_error:
    - logger.log: "Voice assistant error"

script:
  # Script executed when we want to play sounds on the device.
  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ( (id(external_media_player).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING ) || priority) {
            id(external_media_player)
              ->play_file(sound_file, true, false);
          }
